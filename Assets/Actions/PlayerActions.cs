//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""161a3e3f-e241-4dfd-a2ac-cf189883c379"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a850441d-313a-4d20-a908-1ccca850574c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1a90a74d-2508-40bf-8d85-1a55141cee60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec439557-c94a-41ed-a896-711d4ca0f003"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""945f5dbf-e96a-47a5-a853-c79c070c6bcb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fd081386-5160-40a3-a2da-144261c1f974"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd815154-8c8e-4414-8a36-2206dbf77dc8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b26f57fc-2a71-492b-848f-6a66a6084aac"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Contller"",
                    ""id"": ""9e3b3e56-ef94-421a-b73f-ee8ce28ea722"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""19caff68-98c0-42b5-8096-c657ce72b062"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7579bb10-5425-4fc5-9423-ae8ad1f7bbcc"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Vacuum"",
            ""id"": ""6ec33095-08b2-4395-96c6-907b4f5622bd"",
            ""actions"": [
                {
                    ""name"": ""Absorption"",
                    ""type"": ""Button"",
                    ""id"": ""582d8831-77da-4f6c-bcdd-6038628976f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpittingOut"",
                    ""type"": ""Button"",
                    ""id"": ""d554c1a6-0189-4d64-b510-241cb4c9db19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftSelect"",
                    ""type"": ""Button"",
                    ""id"": ""d096f75f-636d-4128-981b-d7fb4965702e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSelect"",
                    ""type"": ""Button"",
                    ""id"": ""d3da2573-4191-4b07-8e13-c7c3c77bbc9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TankSelect"",
                    ""type"": ""Value"",
                    ""id"": ""b3b66551-65cb-4eb5-8cfd-6d4d6a5c1c00"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VacuumPos"",
                    ""type"": ""Value"",
                    ""id"": ""32b1b7b1-beb0-462c-aabf-c1d8b1a59080"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VacuumMouse"",
                    ""type"": ""Value"",
                    ""id"": ""3292e85e-82af-4a50-a658-5737e3fd55fb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fbbd3de9-342e-4778-91cc-fa51ea1cf671"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Absorption"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d137426-4993-4606-894e-d38e261e8413"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Absorption"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b1e8db5-1fd0-48a9-8617-cf2be9249687"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpittingOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8669e44-cb9a-4ad3-bc98-3e0c638bc582"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpittingOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11e04afb-c2a0-41ae-a9eb-2a84c4ed956a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cba2dc97-1822-4dc9-b991-fd4881853851"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""072b2718-679a-49be-a89e-b0031247e65b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c480fbd2-8298-45d1-a05d-903a7884e5ec"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VacuumPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""659ee903-e07d-47dd-b7f9-588aa926ac21"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VacuumMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""a71c2d18-8b94-43ba-b5d1-4e857650110a"",
            ""actions"": [
                {
                    ""name"": ""UISelect"",
                    ""type"": ""Button"",
                    ""id"": ""fbe36503-966d-42e5-9c15-33ca4082fc2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a512d0a-a03f-41cc-b5b6-3fc56d3dd6db"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UISelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c795f3d8-01e3-443e-8284-959d0efa8448"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UISelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // Vacuum
        m_Vacuum = asset.FindActionMap("Vacuum", throwIfNotFound: true);
        m_Vacuum_Absorption = m_Vacuum.FindAction("Absorption", throwIfNotFound: true);
        m_Vacuum_SpittingOut = m_Vacuum.FindAction("SpittingOut", throwIfNotFound: true);
        m_Vacuum_LeftSelect = m_Vacuum.FindAction("LeftSelect", throwIfNotFound: true);
        m_Vacuum_RightSelect = m_Vacuum.FindAction("RightSelect", throwIfNotFound: true);
        m_Vacuum_TankSelect = m_Vacuum.FindAction("TankSelect", throwIfNotFound: true);
        m_Vacuum_VacuumPos = m_Vacuum.FindAction("VacuumPos", throwIfNotFound: true);
        m_Vacuum_VacuumMouse = m_Vacuum.FindAction("VacuumMouse", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_UISelect = m_UI.FindAction("UISelect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @PlayerActions m_Wrapper;
        public MovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Vacuum
    private readonly InputActionMap m_Vacuum;
    private List<IVacuumActions> m_VacuumActionsCallbackInterfaces = new List<IVacuumActions>();
    private readonly InputAction m_Vacuum_Absorption;
    private readonly InputAction m_Vacuum_SpittingOut;
    private readonly InputAction m_Vacuum_LeftSelect;
    private readonly InputAction m_Vacuum_RightSelect;
    private readonly InputAction m_Vacuum_TankSelect;
    private readonly InputAction m_Vacuum_VacuumPos;
    private readonly InputAction m_Vacuum_VacuumMouse;
    public struct VacuumActions
    {
        private @PlayerActions m_Wrapper;
        public VacuumActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Absorption => m_Wrapper.m_Vacuum_Absorption;
        public InputAction @SpittingOut => m_Wrapper.m_Vacuum_SpittingOut;
        public InputAction @LeftSelect => m_Wrapper.m_Vacuum_LeftSelect;
        public InputAction @RightSelect => m_Wrapper.m_Vacuum_RightSelect;
        public InputAction @TankSelect => m_Wrapper.m_Vacuum_TankSelect;
        public InputAction @VacuumPos => m_Wrapper.m_Vacuum_VacuumPos;
        public InputAction @VacuumMouse => m_Wrapper.m_Vacuum_VacuumMouse;
        public InputActionMap Get() { return m_Wrapper.m_Vacuum; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VacuumActions set) { return set.Get(); }
        public void AddCallbacks(IVacuumActions instance)
        {
            if (instance == null || m_Wrapper.m_VacuumActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VacuumActionsCallbackInterfaces.Add(instance);
            @Absorption.started += instance.OnAbsorption;
            @Absorption.performed += instance.OnAbsorption;
            @Absorption.canceled += instance.OnAbsorption;
            @SpittingOut.started += instance.OnSpittingOut;
            @SpittingOut.performed += instance.OnSpittingOut;
            @SpittingOut.canceled += instance.OnSpittingOut;
            @LeftSelect.started += instance.OnLeftSelect;
            @LeftSelect.performed += instance.OnLeftSelect;
            @LeftSelect.canceled += instance.OnLeftSelect;
            @RightSelect.started += instance.OnRightSelect;
            @RightSelect.performed += instance.OnRightSelect;
            @RightSelect.canceled += instance.OnRightSelect;
            @TankSelect.started += instance.OnTankSelect;
            @TankSelect.performed += instance.OnTankSelect;
            @TankSelect.canceled += instance.OnTankSelect;
            @VacuumPos.started += instance.OnVacuumPos;
            @VacuumPos.performed += instance.OnVacuumPos;
            @VacuumPos.canceled += instance.OnVacuumPos;
            @VacuumMouse.started += instance.OnVacuumMouse;
            @VacuumMouse.performed += instance.OnVacuumMouse;
            @VacuumMouse.canceled += instance.OnVacuumMouse;
        }

        private void UnregisterCallbacks(IVacuumActions instance)
        {
            @Absorption.started -= instance.OnAbsorption;
            @Absorption.performed -= instance.OnAbsorption;
            @Absorption.canceled -= instance.OnAbsorption;
            @SpittingOut.started -= instance.OnSpittingOut;
            @SpittingOut.performed -= instance.OnSpittingOut;
            @SpittingOut.canceled -= instance.OnSpittingOut;
            @LeftSelect.started -= instance.OnLeftSelect;
            @LeftSelect.performed -= instance.OnLeftSelect;
            @LeftSelect.canceled -= instance.OnLeftSelect;
            @RightSelect.started -= instance.OnRightSelect;
            @RightSelect.performed -= instance.OnRightSelect;
            @RightSelect.canceled -= instance.OnRightSelect;
            @TankSelect.started -= instance.OnTankSelect;
            @TankSelect.performed -= instance.OnTankSelect;
            @TankSelect.canceled -= instance.OnTankSelect;
            @VacuumPos.started -= instance.OnVacuumPos;
            @VacuumPos.performed -= instance.OnVacuumPos;
            @VacuumPos.canceled -= instance.OnVacuumPos;
            @VacuumMouse.started -= instance.OnVacuumMouse;
            @VacuumMouse.performed -= instance.OnVacuumMouse;
            @VacuumMouse.canceled -= instance.OnVacuumMouse;
        }

        public void RemoveCallbacks(IVacuumActions instance)
        {
            if (m_Wrapper.m_VacuumActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVacuumActions instance)
        {
            foreach (var item in m_Wrapper.m_VacuumActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VacuumActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VacuumActions @Vacuum => new VacuumActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_UISelect;
    public struct UIActions
    {
        private @PlayerActions m_Wrapper;
        public UIActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UISelect => m_Wrapper.m_UI_UISelect;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @UISelect.started += instance.OnUISelect;
            @UISelect.performed += instance.OnUISelect;
            @UISelect.canceled += instance.OnUISelect;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @UISelect.started -= instance.OnUISelect;
            @UISelect.performed -= instance.OnUISelect;
            @UISelect.canceled -= instance.OnUISelect;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IVacuumActions
    {
        void OnAbsorption(InputAction.CallbackContext context);
        void OnSpittingOut(InputAction.CallbackContext context);
        void OnLeftSelect(InputAction.CallbackContext context);
        void OnRightSelect(InputAction.CallbackContext context);
        void OnTankSelect(InputAction.CallbackContext context);
        void OnVacuumPos(InputAction.CallbackContext context);
        void OnVacuumMouse(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnUISelect(InputAction.CallbackContext context);
    }
}
